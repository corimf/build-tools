#!/bin/sh -e
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

###############################################################################
# Use the -e option so the script will fail on the first non-zero return code.

# This is a script to create a new ESR branch $BRANCH from the specified 
# platform branch $BASE_BRANCH and from the latest production plugins and 
# $OTHER_REPOS. It will also pull the latest content of $BASE_BRANCH from
# $REMOTE_MASTER.

if [ "$1" = "" ]
then
    echo "Loading the settings from corimf-settings..."
    source corimf-settings
else
    echo "Loading the settings from $1"
    source "$1"
fi

echo "MASTER_ORIGIN=$MASTER_ORIGIN"
echo "REMOTE_ORIGIN=$REMOTE_ORIGIN"
echo "BASE_BRANCH=$BASE_BRANCH"
echo "BRANCH=$BRANCH"
echo "NEW_TAG=$NEW_TAG"

/bin/echo -n "Hit ENTER to continue: "
read ANSWER

# Shouldn't need to change anything below here.

check_rc() {
    SAVE_RC=$?
    if [ $SAVE_RC != 0 ]
    then
        echo "Failed."
        exit $RC
    elif [ "$DONE" = 1 ]
    then
        echo "Success."
    else
        echo "Incomplete."
        exit 1
    fi
}

trap check_rc EXIT

# An idempotent wrapper around the "git tag" command.
# Usage: git_tag_unless MY_NEW_TAG [TARGET]
git_tag_unless() {
    TAG_NAME=$1
    test ! -z "$TAG_NAME"
    # TARGET is optional
    TARGET=$2
    if [ -z "$TARGET" ]
    then
        TARGET="HEAD"
    fi
    HASH1=`git rev-parse $TAG_NAME || true`
    HASH2=`git rev-parse $TARGET || true`
    if [ "$HASH1" = "$TAG_NAME" ]
    then
        # doesn't exist
        git tag $TAG_NAME
    elif [ ! -z "$HASH1" -a "$HASH1" = "$HASH2" ]
    then
        # already exists like we want.
        echo "Tag $TAG_NAME already exists at $TARGET, which is OK."
    else
        # at a different hash
        echo "Existing tag $TAG_NAME does not reference the same hash as $TARGET."
        fail
    fi
}

echo "Checking that we are one dir above the git repo..."
test -d $PLATFORM_REPO

echo "Checking major version number..."
MAJOR=`echo $BRANCH | cut -f1 -d.`
test "$MAJOR" -ge 2 -a "$MAJOR" -le 3

if [ "$MAJOR" -ge 3 ]
then
    echo "Checking that the plugin count is $PLUGIN_COUNT..."
    COUNT=0
    for PLUGIN in $PLUGINS
    do
        COUNT=`expr $COUNT + 1`
    done
    test "$COUNT" == "$PLUGIN_COUNT"
else
    echo "Skipping all plugins since version is $MAJOR"
    PLUGINS=
    PLUGMAN_REPO=
fi

echo "Checking that each repo exists..."
for DIR in $PLATFORM_REPOS $PLUGINS $OTHER_REPOS
do
    test -d $DIR
done

echo "Checking that $REMOTE_ORIGIN is a defined remote..."
for DIR in $PLATFORM_REPOS $PLUGINS $OTHER_REPOS
do
    pushd $DIR
    git remote | grep $REMOTE_ORIGIN
    popd
done

echo "Checking that $MASTER_ORIGIN is a defined remote..."
for DIR in $PLATFORM_REPOS $PLUGINS $OTHER_REPOS
do
    pushd $DIR
    git remote | grep $MASTER_ORIGIN
    popd
done

echo "Checking out $BASE_BRANCH for platforms..."
for DIR in $PLATFORM_REPOS
do
    pushd $DIR
    git fetch $MASTER_ORIGIN
    git checkout $BASE_BRANCH || git checkout -b $BASE_BRANCH $MASTER_ORIGIN/$BASE_BRANCH
    git pull $MASTER_ORIGIN $BASE_BRANCH
    git fetch --tags $MASTER_ORIGIN
    # get this much current in $REMOTE_ORIGIN
    git push $REMOTE_ORIGIN $BASE_BRANCH
    git push --tags $REMOTE_ORIGIN
    popd
done
echo "Checking out master for plugins and other..."
# this does assume you want the latest release for the plugis and other
for DIR in $PLUGINS $OTHER_REPOS
do
    pushd $DIR
    git fetch $MASTER_ORIGIN
    git checkout master || git checkout -b master $MASTER_ORIGIN/master
    git pull $MASTER_ORIGIN master
    git fetch --tags $MASTER_ORIGIN
    # get this much current in $REMOTE_ORIGIN
    git push $REMOTE_ORIGIN master
    git push --tags $REMOTE_ORIGIN
    popd
done

echo "Creating branch $BRANCH for platform repos..."
# master for platforms and other, dev for plugins
for DIR in $PLATFORM_REPOS
do
    pushd $DIR
    echo "Checking out $BRANCH in $DIR..."
    git checkout $BRANCH || git checkout -b $BRANCH $MASTER_ORIGIN/$BASE_BRANCH
    echo "Pushing $BRANCH to $REMOTE_ORIGIN..."
    git push $REMOTE_ORIGIN $BRANCH
    echo "Creating tag $NEW_TAG"
    git_tag_unless $NEW_TAG
    git push --tags $REMOTE_ORIGIN
    popd
done
echo "Creating branch $BRANCH for plugin repos..."
for DIR in $PLUGINS
do
    # get corresponding plugin tag from json file
    PLUGIN_TAG=`node build-tools/get_repo_ver.js $BRANCH $DIR`
    if [ -z "$PLUGIN_TAG" ]
    then
        echo "Could not get plugin tag for $DIR from config.json file. Could not create $BRANCH for $DIR"
        fail
    else
        echo "Got plugin tag: $PLUGIN_TAG"
    fi

    pushd $DIR
    git fetch $REMOTE_ORIGIN
    if [ `git tag --list $PLUGIN_TAG` ]
    then
        echo "Checking out $BRANCH in $DIR..."
        git checkout $BRANCH || git checkout -b $BRANCH $PLUGIN_TAG
        echo "Pushing $BRANCH to $REMOTE_ORIGIN..."
        git push $REMOTE_ORIGIN $BRANCH
        echo "Creating tag $NEW_TAG"
        git_tag_unless $NEW_TAG
        git push --tags $REMOTE_ORIGIN
    else
        echo "Plugin tag: $PLUGIN_TAG does not exist. Could not create $BRANCH for $DIR"
        fail
    fi
    popd
done
echo "Creating branch $BRANCH for other repos..."
for DIR in $OTHER_REPOS
do
    # get corresponding plugin tag from json file
    TOOL_TAG=`node build-tools/get_repo_ver.js $BRANCH $DIR`
    if [ -z "$TOOL_TAG" ]
    then
        echo "Could not get plugin tag for $DIR from config.json file. Could not create $BRANCH for $DIR"
        fail
    else
        echo "Got tool tag: $TOOL_TAG"
    fi

    pushd $DIR
    # cordova-blackberry-plugins uses master which is not a tag
    if [ ! -z "`git tag --list $TOOL_TAG`" -o "$TOOL_TAG" = "master" ]
    then
        echo "Checking out $BRANCH in $DIR..."
        git checkout $BRANCH || git checkout -b $BRANCH $TOOL_TAG
        echo "Pushing $BRANCH to $REMOTE_ORIGIN..."
        git push $REMOTE_ORIGIN $BRANCH
        echo "Creating tag $NEW_TAG"
        git_tag_unless $NEW_TAG
        git push --tags $REMOTE_ORIGIN
    else
        echo "Tool tag: $TOOL_TAG does not exist. Could not create $BRANCH for $DIR"
        fail
    fi
    popd
done

DONE=1
