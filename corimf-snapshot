#!/bin/sh -e
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

###############################################################################
# Use the -e option so the script will fail on the first non-zero return code.

# This is a script to create a source snapshot of the specified $NEW_TAG.
# It will not fetch from $REMOTE_ORIGIN or $MASTER_ORIGIN, it is expected
# that the local repos are already up-to-date (via the other scripts here).
# You may need to have cordova-coho checked out at the WL6200 tag for this
# script to work.

# Checking that jq executable is present
WHICH=$(which jq || true)
if [ -z "$WHICH" ]
then
    echo "Error: Please install jq from http://stedolan.github.io/jq/"
    echo "It is needed to parse json output."
    exit 2
fi
# Checking that xmllint executable is present
WHICH=$(which xmllint || true)
if [ -z "$WHICH" ]
then
    echo "Error: Please install xmllint"
    echo "It is needed to parse xml output."
    exit 2
fi

if [ "$1" = "" ]
then
    echo "Loading the settings from corimf-settings..."
    source corimf-settings
else
    echo "Loading the settings from $1"
    source "$1"
fi

echo "NEW_TAG=$NEW_TAG"
echo "PREV_TAG=$PREV_TAG"
echo "BRANCH=$BRANCH"

/bin/echo -n "Hit ENTER to continue: "
read ANSWER

# Shouldn't need to change anything below here.

check_rc() {
    SAVE_RC=$?
    if [ $SAVE_RC != 0 ]
    then
        echo "Failed."
        exit $RC
    elif [ "$DONE" = 1 ]
    then
        echo "Success."
    else
        echo "Incomplete."
        exit 1
    fi
}

trap check_rc EXIT

echo "Checking that we are one dir above the git repo..."
test -d $PLATFORM_REPO

echo "Checking major version number..."
MAJOR=`echo $BRANCH | cut -f1 -d.`
test "$MAJOR" -ge 2 -a "$MAJOR" -le 4

if [ "$MAJOR" -ge 3 ]
then
    echo "Checking that the plugin count is $PLUGIN_COUNT..."
    COUNT=0
    for PLUGIN in $PLUGINS
    do
        COUNT=`expr $COUNT + 1`
    done
    test "$COUNT" == "$PLUGIN_COUNT"
else
    echo "Skipping all plugins since version is $MAJOR"
    PLUGINS=
    PLUGMAN_REPO=
    # strip cordova-cli and cordova-plugman and cordova-blackberry-plugins from OTHER_REPOS when 2.x
    OTHER_REPOS=`echo $OTHER_REPOS | sed -e 's/cordova-cli//' | sed -e 's/cordova-plugman//' | sed -e 's/cordova-blackberry-plugins//'`

fi

echo "Checking that each repo exists..."
for DIR in $PLATFORM_REPOS $PLUGINS $OTHER_REPOS
do
    test -d $DIR
done

echo "Checking that output directory $NEW_TAG does not already exist..."
test ! -d $NEW_TAG
mkdir $NEW_TAG

echo "Creating zip of each repo..."
for DIR in $PLATFORM_REPOS $PLUGINS $OTHER_REPOS
do
    pushd $DIR
    git archive --format zip --prefix $DIR/ -o ../$NEW_TAG/$DIR-$NEW_TAG.zip $NEW_TAG
    popd
done

echo "Getting cordova-blackberry-plugins..."
SAVE_DIR=`pwd`
# using similar command as what is in "coho create-archive"
pushd cordova-blackberry-plugins
# The name for pimlib changed between 3.1.0 and 3.4.0.
if [ -d plugin/org.apache.cordova.blackberry10.pimlib ]
then
    echo "  Using old pimlib name."
    PIMLIB="plugin/org.apache.cordova.blackberry10.pimlib"
elif [ -d plugin/com.blackberry.pim.lib ]
then
    echo "  Using new pimlib name."
    PIMLIB="plugin/com.blackberry.pim.lib"
elif [ $MAJOR -eq 2 ]
then
    # hmm, I don't think this is needed for 2.x
    echo "Skipping BlackBerry plugin for Cordova 2.x"
else
    # something is wrong
    echo "Can't find BlackBerry plugin."
    exit 1
fi

if [ $MAJOR -ge 3 ]
then
    test -d plugin/com.blackberry.utils
    test -d $PIMLIB
    # we also need to get the pieces to compile from source. See the README.md
    # for instructions on how to compile.
    git archive --format zip --prefix cordova-blackberry-plugins/ -o $SAVE_DIR/$NEW_TAG/cordova-blackberry-plugins-$NEW_TAG.zip $NEW_TAG plugin/com.blackberry.utils $PIMLIB Jakefile LICENSE README.md package.json Makefile test scripts dependencies plugin/Makefile plugin/meta.mk
fi
popd

echo "Creating reference to build instructions..."
cat << EOM > $SAVE_DIR/$NEW_TAG/IBM-INSTRUCTIONS.html
<html>
  <head>
    <title>Reference to Instructions for Building Cordova Snapshot from Source</title>
  </head>
  <body>
    <h1>Building Cordova Snapshot from Source</h1>
    The instructions can be found <a href="https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W9ae505f4bacb_461a_acbb_680b6ed21a7f/page/BlueWash%20Process">here</a>.
  </body>
</html>
EOM

echo "Storing hashes and release notes..."
echo "corimf git hashes and release notes for $NEW_TAG (as compared to $PREV_TAG):" > $NEW_TAG/IBM-RELEASE-NOTES.txt
SAVE_DIR=`pwd`
for DIR in $PLATFORM_REPOS $PLUGINS $OTHER_REPOS
do
    pushd $DIR
    EXPECTED=`git rev-parse $NEW_TAG`
    LOCAL=`git log -1 --pretty=oneline | cut -f1 -d' '`
    if [ -z "`git tag --list $PREV_TAG`" ]
    then
        echo "WARNING: is $DIR a new repo? $PREV_TAG is not found."
        PREV="(non-existent)"
        NEW_REPO=1
        DIFF=
    else
        PREV=`git rev-parse $PREV_TAG`
        NEW_REPO=0
        DIFF=`git diff --numstat $PREV_TAG $NEW_TAG`
    fi
    if [ -z "$DIFF" ]
    then
        DIFF="(no differences detected)"
    fi
    LOG=`git log --pretty=oneline --abbrev-commit $PREV_TAG..$NEW_TAG`
    if [ -z "$LOG" ]
    then
        LOG="(no log detected)"
    fi
    if [ -f IBM-MODIFICATIONS.txt ]
    then
        MODIFICATIONS=`git diff $PREV_TAG $NEW_TAG IBM-MODIFICATIONS.txt`
        MODIFICATIONS_STRIP=`echo "$MODIFICATIONS" | tr -d '\n' | tr -d '\r'`
        if [ -z "$MODIFICATIONS_STRIP" ]
        then
            MODIFICATIONS='(no modifications listed manually)'
        fi
    elif [ $NEW_REPO == 1 ]
    then
        MODIFICATIONS="(*** This appears to be a new repo. Assume all files are new. ***)"
    else
        MODIFICATIONS='(no manual definition file found)'
    fi
    LOCAL_BRANCH=`git status -b --porcelain | grep '^##' | cut -f2 -d' '`
    cat << EOM >> $SAVE_DIR/$NEW_TAG/IBM-RELEASE-NOTES.txt

Repository: $DIR

Git Hashes: 
      expected=$EXPECTED
         local=$LOCAL
  local branch=$LOCAL_BRANCH
      previous=$PREV

IBM Modifications:
$MODIFICATIONS

Diff Stats (lines added/deleted/filename) between $PREV_TAG and $NEW_TAG:
$DIFF

Commit Log (hash + comment) between $PREV_TAG and $NEW_TAG:
$LOG

============================================================================
EOM
    unset EXPECTED
    unset LOCAL
    unset DIFF
    unset LOG
    unset MODIFICATIONS
    unset LOCAL_BRANCH
    popd
done

echo "Creating CORDOVA-VERSIONS.json..."
cat << EOM >> $SAVE_DIR/$NEW_TAG/IBM-RELEASE-NOTES.txt

Unable to determine if CORDOVA-VERSIONS.json is modified since it is a
computed resource, so assume it has changed.

============================================================================
EOM
# there are a couple exceptions where version numbers we need aren't a 1:1 map to repos
OTHER_REPOS_VERSIONED=$OTHER_REPOS
PLUGINS_VERSIONED=$PLUGINS
BBPRESENT=$(echo "$OTHER_REPOS" | grep cordova-blackberry-plugins || true)
if [ ! -z "$BBPRESENT" ]
then
    OTHER_REPOS_VERSIONED=$(echo "$OTHER_REPOS_VERSIONED" | sed -e 's/cordova-blackberry-plugins//')
    PLUGINS_VERSIONED="$PLUGINS_VERSIONED cordova-blackberry-plugins/plugin/com.blackberry.utils cordova-blackberry-plugins/$PIMLIB"
fi
VERSIONS="{\n  \"INTERNAL_TAG\": \"$NEW_TAG\""
for DIR in $OTHER_REPOS_VERSIONED $PLATFORM_REPOS
do
    if [ "$DIR" = "cordova-lib" ]
    then
        PACKAGE_JSON=$DIR/$DIR/package.json
    else
        PACKAGE_JSON=$DIR/package.json
    fi
    test -f $PACKAGE_JSON
    VERSION=$(cat $PACKAGE_JSON | jq .version)
    VERSIONS="${VERSIONS},\n  \"$DIR\": $VERSION"
done
for DIR in $PLUGINS_VERSIONED
do
    test -f $DIR/plugin.xml
    VERSION=$(xmllint --xpath "//*[local-name()='plugin']/@version" $DIR/plugin.xml | cut -f2 -d=)
    ID=$(xmllint --xpath "//*[local-name()='plugin']/@id" $DIR/plugin.xml | cut -f2 -d=)
    VERSIONS="${VERSIONS},\n  ${ID}: $VERSION"
done
VERSIONS="${VERSIONS}\n}\n"
echo "$VERSIONS" > $SAVE_DIR/$NEW_TAG/CORDOVA-VERSIONS.json

echo "Creating zip file..."
VERSION=`cat cordova-cli/package.json | jq -r .version`
test ! -z "$VERSION"
zip -r cordova-$VERSION-$NEW_TAG.zip $NEW_TAG

DONE=1
