#!/bin/sh -e
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

###############################################################################
# Use the -e option so the script will fail on the first non-zero return code.

# This is a script to automate building a 2.3.0 thru 3.1.0 snapshot of Android
# Cordova for delivery to a product team to integrate. The manual process for
# this is described in our wiki. It is assumed that the platform/plugman/plugin
# repos have already been tagged with NEW_TAG. If you are just doing a test
# build and not creating a snapshot for product integration, you can get around
# the NEW_TAG check by setting it to "HEAD" in your corimf-settings file.

if [ "$1" = "" ]
then
    echo "Loading the settings from corimf-settings..."
    source corimf-settings
else
    echo "Loading the settings from $1"
    source "$1"
fi

echo "PLATFORM_REPO=$PLATFORM_REPO"
echo "REMOTE_ORIGIN=$REMOTE_ORIGIN"
echo "BRANCH=$BRANCH"
echo "NEW_TAG=$NEW_TAG"
echo "SKIP_PLUGIN=$SKIP_PLUGIN"

/bin/echo -n "Hit ENTER to continue: "
read ANSWER

# Shouldn't need to change anything below here.

check_rc() {
    SAVE_RC=$?
    if [ $SAVE_RC != 0 ]
    then
        echo "Failed."
        exit $RC
    elif [ "$DONE" = 1 ]
    then
        echo "Success."
    else
        echo "Incomplete."
        exit 1
    fi
}

trap check_rc EXIT

echo "Running Android Cordova build of corimf:"
echo "  Date:" `date`
echo "  Remote origin: $REMOTE_ORIGIN"
echo "  Branch: $BRANCH"
echo "  New Tag: $NEW_TAG"
echo "  Skip Plugin: $SKIP_PLUGIN"
echo

echo "Checking that we are one dir above the git repo..."
test -d $PLATFORM_REPO

echo "Checking major version number..."
MAJOR=`echo $BRANCH | cut -f1 -d.`
test "$MAJOR" -ge 2 -a "$MAJOR" -le 3

if [ "$MAJOR" -ge 3 ]
then
    echo "Checking that the plugin count is $PLUGIN_COUNT..."
    COUNT=0
    for PLUGIN in $PLUGINS
    do
        COUNT=`expr $COUNT + 1`
    done
    test "$COUNT" == "$PLUGIN_COUNT"
else
    echo "Skipping all plugins since version is $MAJOR"
    PLUGINS=
    PLUGMAN_REPO=
fi

echo "Checking that each plugin repo exists..."
for PLUGIN in $PLUGINS
do
    test -d $PLUGIN
done


echo "Checking that we are on the expected ESR branch $BRANCH for platform and plugins..."
for DIR in $PLATFORM_REPO $PLUGMAN_REPO $PLUGINS
do
    /bin/echo -n "$DIR: "
    cd $DIR
    git status --porcelain -b | grep '^##' | grep "$BRANCH\$"
    cd ..
done

echo "Doing a git pull and tags fetch on platform and plugins to make sure we are up-to-date..."
for DIR in $PLATFORM_REPO $PLUGMAN_REPO $PLUGINS
do
    /bin/echo -n "$DIR: "
    cd $DIR
    git pull $REMOTE_ORIGIN $BRANCH
    git fetch --tags $REMOTE_ORIGIN
    cd ..
done

echo "Checking that the platform and plugins have the tag $NEW_TAG..."
for DIR in $PLATFORM_REPO $PLUGMAN_REPO $PLUGINS
do
    /bin/echo -n "$DIR: "
    cd $DIR
    git rev-parse $NEW_TAG
    cd ..
done

echo "Checking that the platform and plugins are checked out at the tag $NEW_TAG..."
for DIR in $PLATFORM_REPO $PLUGMAN_REPO $PLUGINS
do
    /bin/echo -n "$DIR: "
    cd $DIR
    ACTUAL=`git log -1 --format=oneline | cut -f1 -d' '`
    DESIRED=`git rev-parse $NEW_TAG`
    test "$ACTUAL" == "$DESIRED"
    cd ..
done

echo "Checking that we are using compiler for Java 5 or 6, not 7..."
VERSION=`javac -version 2>&1 | cut -f2 -d.`
test "$VERSION" -ge 5 -a "$VERSION" -le 6

if [ $BRANCH = "2.6.0esr" ]
then
    echo "Updating platform to use API 17..."
    android update project -p $PLATFORM_REPO/framework -t android-17
    # Work around annoying bug in the bin/build script that assumes API 17
    # is the latest you have installed.
    echo "Checking that API 17 is the most recent SDK installed..."
    API_LEVEL=`android list targets | grep "API level:" | tail -n1 | cut -f2 -d: | tr -d ' '`
    if [ "$API_LEVEL" != "17" ]
    then
        echo "Sorry, you need to uninstall the SDK for API $API_LEVEL"
        echo "  or temporarily disable it by moving it to another directory, because it is"
        echo "  preventing API 17 from being the most recent API installed."
        echo '  (i.e., move $SDK_HOME/sdk/platforms/android-18 $SDK_HOME/sdk/disabled-platforms/android-18 and make sure you have "Android SDK Build Tools" for v17 installed.'
        exit 1
    fi
fi 

echo "Rebuilding the cordova.jar..."
cd cordova-android
cd framework
ant clean
ant jar
cd ..
cd ..

PROJECT_DIR=example-android-$NEW_TAG
SNAPSHOT_DIR=forgsa-android-$NEW_TAG

echo "Checking that project $PROJECT_DIR does not exist yet..."
test ! -e $PROJECT_DIR

echo "Checking that snapshot dir $SNAPSHOT_DIR does not exist yet..."
test ! -f $SNAPSHOT_DIR

echo "Creating a new Android project..."
cordova-android/bin/create $PROJECT_DIR com.example Example

if [ ! -z "$PLUGINS" ]
then
    echo "Load pre-reqs for plugman..."
    cd $PLUGMAN_REPO
    if [ -d node_modules ]
    then
        rm -r node_modules
    fi
    npm install
    cd ..
fi

echo "Installing plugins into project..."
for PLUGIN in $PLUGINS
do
    if [ "$PLUGIN" = "$SKIP_PLUGIN" ]
    then
        echo "Warning: Skipping $PLUGIN"
        continue
    fi
    node $PLUGMAN_REPO/main.js --debug install -platform android -project $PROJECT_DIR --plugin ./$PLUGIN
done

echo "Building the project (apk)..."
cd $PROJECT_DIR
ant debug
# capture the plugins in a jar for Worklight as a convenience
jar cvf cordova_plugins.jar -C bin/classes org/apache/cordova
cd ..

echo "Creating snapshot content in $SNAPSHOT_DIR..."
mkdir $SNAPSHOT_DIR

# get the original platform project. Not really needed perhaps.
cp -rp cordova-android/framework $SNAPSHOT_DIR/framework
if [ -d $SNAPSHOT_DIR/framework/test ]
then
    # don't need test artifacts
    rm -r $SNAPSHOT_DIR/framework/test
fi

# get the example project, which includes cordova.jar and cordova.js.
cp -rp $PROJECT_DIR $SNAPSHOT_DIR/example
if [ -d $SNAPSHOT_DIR/example/assets/www/spec ]
then
    # don't need test artifacts
    rm -r $SNAPSHOT_DIR/example/assets/www/spec
fi

# get the IBM-MODIFICATIONS.txt files, just to be nice.
mkdir $SNAPSHOT_DIR/modifications
for REPO in $PLATFORM_REPO $PLUGMAN_REPO $PLUGINS
do
    test -f $REPO/IBM-MODIFICATIONS.txt && cp $REPO/IBM-MODIFICATIONS.txt $SNAPSHOT_DIR/modifications/$REPO.IBM-MODIFICATIONS.txt
done

# remove metadata files created by OSX Finder
find $SNAPSHOT_DIR -name .DS_Store -delete

echo "Zipping snapshot content as $SNAPSHOT_DIR.zip..."
zip -r $SNAPSHOT_DIR.zip $SNAPSHOT_DIR

# TODO: echo "Checking that each plugin repo is present..."
# TODO: echo "Checking that each plugin is checked out at the correct tag"

echo "All building complete."

DONE=1
